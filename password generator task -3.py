import string
import secrets
import pyperclip

def generate_password(length, complexity):
    """
    Generate a random password with specified length and complexity.

    Args:
        length (int): The length of the password.
        complexity (str): A string representing the desired complexity of the password.
                          'l' for lowercase letters, 'u' for uppercase letters,
                          'd' for digits, 's' for symbols.

    Returns:
        str: The generated password.
    """
    # Define character sets for each complexity type
    lowercase_letters = string.ascii_lowercase
    uppercase_letters = string.ascii_uppercase
    digits = string.digits
    symbols = string.punctuation

    # Create a charset based on the specified complexity
    charset = ""
    if 'l' in complexity:
        charset += lowercase_letters
    if 'u' in complexity:
        charset += uppercase_letters
    if 'd' in complexity:
        charset += digits
    if 's' in complexity:
        charset += symbols

    # Check if valid complexity is provided
    if not charset:
        print("Invalid complexity! Please include at least one of 'l', 'u', 'd', 's'.")
        return None

    # Generate password using secrets module for randomness
    password = ''.join(secrets.choice(charset) for _ in range(length))
    return password

def display_welcome():
    """Display a welcome message for the password generator."""
    print("Welcome to Password Generator")

def display_farewell():
    """Display a farewell message for the password generator."""
    print("Thank you for using Password Generator. Goodbye!")

def generate_passwords():
    """Generate passwords based on user input."""
    while True:
        print("\nPASSWORD GENERATOR MENU:")
        print("1. Generate Password")
        print("2. Exit")

        # Get user input for choice
        choice = input("Enter your choice (1/2): ")

        if choice == '2':
            display_farewell()
            break

        if choice == '1':
            # Prompt user for password length and complexity
            length = input("Enter password length: ")
            complexity = input("Enter password complexity (l for lowercase, u for uppercase, d for digits, s for symbols, e.g., lud): ")

            try:
                # Convert length to integer and check if it's positive
                length = int(length)
                if length <= 0:
                    raise ValueError
            except ValueError:
                print("Invalid input! Please enter a positive integer for password length.")
                continue

            # Check if provided complexity is valid
            valid_complexity = set('ludse')
            if not set(complexity).issubset(valid_complexity):
                print("Invalid complexity! Please include only 'l', 'u', 'd', 's'.")
                continue

            # Generate the password
            password = generate_password(length, complexity)
            if password:
                print("Generated Password:", password)

                # Ask user if they want to copy the password to clipboard
                copy_to_clipboard = input("Do you want to copy the generated password to clipboard? (yes/no): ").lower()
                if copy_to_clipboard == 'yes':
                    pyperclip.copy(password)
                    print("Password copied to clipboard!")
        else:
            print("Invalid choice! Please choose again.")

def main():
    """Main function to start the password generator."""
    display_welcome()
    generate_passwords()

if __name__ == "__main__":
    main()


Explanation of the algorithm:

The generate_password function takes two parameters: length and complexity. It generates a random password of the specified length and complexity.
Inside generate_password, character sets for lowercase letters, uppercase letters, digits, and symbols are defined using the string module.
Based on the provided complexity, characters from appropriate character sets are added to the charset.
If an invalid complexity is provided, the function prints an error message and returns None.
The password is generated by selecting random characters from the charset using the secrets.choice function.
The generated password is returned to the caller.
The generate_passwords function implements a menu-driven approach to generate passwords based on user input. It repeatedly prompts the user to select an option until they choose to exit.
User input is validated for correctness and handled accordingly.
The display_welcome and display_farewell functions provide friendly messages to the user when they start and exit the password generator, respectively.



